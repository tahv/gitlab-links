[project]
name = "mdx-gitlab-links"
description = "An extension to Python-Markdown which adds support for GitLab-specific references."
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "Thibaud Gambier" }]
requires-python = ">=3.9"
dynamic = ["version"]
dependencies = ["markdown>=3.7"]
keywords = ["markdown", "python-markdown", "gitlab"]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Documentation",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing :: Markup :: HTML",
  "Topic :: Text Processing :: Markup :: Markdown",
]

[project.urls]
Homepage = "https://pypi.org/project/mdx-gitlab-links"
Repository = "https://github.com/tahv/gitlab-links"
"Issue Tracker" = "https://github.com/tahv/gitlab-links/issues"
Changelog = "https://github.com/tahv/gitlab-links/blob/main/CHANGELOG.md"

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
  { include-group = "lint" },
  { include-group = "mypy" },
  { include-group = "test" },
  { include-group = "coverage" },
  { include-group = "build" },
]
lint = ["ruff>=0.7.3"]
mypy = [
  "mypy>=1.13.0",
  "types-markdown>=3.7.0.20240822",
  { include-group = "test" },
]
test = ["pytest>=8.3.3"]
coverage = ["coverage>=7.6.7"]
testcov = [{ include-group = "test" }, { include-group = "coverage" }]
build = ["setuptools-scm>=8.1.0", "check-wheel-contents>=0.6.0"]

[tool.setuptools_scm]
local_scheme = "no-local-version"

[tool.mypy]
files = ["src", "tests"]
disallow_untyped_defs = true
check_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
show_error_codes = true

[tool.coverage.run]
source_pkgs = ["mdx_gitlab_links"]
branch = true
parallel = true

[tool.coverage.paths]
pyflare = [
  "src/mdx_gitlab_links",
  "*/src/mdx_gitlab_links",
  "*\\src\\mdx_gitlab_links",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
exclude_lines = [
  "# pragma: no cover",
  "if (False|0|TYPE_CHECKING):",
  "if __name__ == ['\"]__main__['\"]:",
]

[tool.ruff]
src = ["src"]
include = ["src/**/*.py", "tests/**/*.py", "**/pyproject.toml"]

[tool.ruff.lint]
select = ["ALL"]
flake8-tidy-imports.ban-relative-imports = "all"
pydocstyle.convention = "google"
isort.required-imports = ["from __future__ import annotations"]
ignore = [
  "D100",   # Missing docstring in public module
  "D102",   # Missing docstring in public method
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "D107",   # Missing docstring in `__init__`
  "FIX002", # Line contains TODO, consider resolving the issue
  "N802",   # Function name should be lowercase
  "TD002",  # Missing author in TODO
  "TD003",  # Missing issue link on the line following this TODO
]
unfixable = [
  "ERA001", # Found commented-out code
  "F401",   # Unused import
]

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*" = [
  "D103",    # Missing docstring in public function
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
  "PT004",   # Fixture does not return anything, add leading underscore
  "S101",    # Use of assert detected
  "INP001",  # File is part of an implicit namespace package. Add an `__init__.py`
  "PLR0913", # Too many arguments in function definition
]
